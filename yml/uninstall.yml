---
- hosts:
    - localhost
  gather_facts: false
  tasks:
    - name: "Waiting for SSH(TCP/22) on All Hosts"
      wait_for:
        timeout: 600
        host: "{{ item }}"
        port: 22
        sleep: 3
      with_items:
        - "{{ groups['all'] }}"

- hosts:
    - all
  gather_facts: false
  vars_files:
    - "vars-common.yml"
    - "uninstall_st.yml"
  vars:
    - greenplum_admin_user: "gpadmin"
  tasks:
    - name: "gpfailover service stop"
      shell: "systemctl stop gpfailover"
      ignore_errors: yes
      when: inventory_hostname in groups['gpdb-smdw']

    - name: "Check GPCC status"
      shell: "gpcc status"
      become: yes
      become_method: su
      become_user: "{{ greenplum_admin_user }}"
      become_flags: "-l"
      ignore_errors: yes
      register: gpcc_status
      when: inventory_hostname in groups['gpdb-mdw']
      failed_when: "gpcc_status.rc > 127"

    - name: "Stop GPCC if it's running"
      shell: "gpcc stop"
      become: yes
      become_method: su
      become_user: "{{ greenplum_admin_user }}"
      become_flags: "-l"
      ignore_errors: yes
      when: inventory_hostname in groups['gpdb-mdw'] and gpcc_status.stdout.find('stopped') == -1 and gpcc_status.rc != 127

    - name: "Check PXF status"
      shell: "/usr/local/greenplum-db/pxf/bin/pxf cluster status"
      become: yes
      become_method: su
      become_user: "{{ greenplum_admin_user }}"
      become_flags: "-l"
      ignore_errors: yes
      register: pxf_status
      when: inventory_hostname in groups['gpdb-mdw']
      failed_when: "pxf_status.rc > 127"

    - name: "Stop PXF if it's running"
      shell: "/usr/local/greenplum-db/pxf/bin/pxf cluster stop"
      become: yes
      become_method: su
      become_user: "{{ greenplum_admin_user }}"
      become_flags: "-l"
      ignore_errors: yes
      when: inventory_hostname in groups['gpdb-mdw'] and pxf_status.stdout.find('not running') == -1 and pxf_status.rc != 127

    - name: "Backup crontab"
      shell: "crontab -l > /home/gpadmin/gpconfigs/crontab.del.bak"
      become: yes
      become_method: su
      become_user: "{{ greenplum_admin_user }}"
      become_flags: "-l"
      ignore_errors: yes
      when: inventory_hostname in groups['gpdb-mdw']

    - name: "Backup postgresql.conf"
      shell: "{{ item }}"
      become: yes
      become_method: su
      become_user: "{{ greenplum_admin_user }}"
      become_flags: "-l"
      ignore_errors: yes
      with_items:
        - "cp -f /data/master/gpseg-1/postgresql.conf /home/gpadmin/gpconfigs/postgresql.conf.del.mdw"
        - "scp sdw1:{{ sdw1_gpseg0_path }}/postgresql.conf /home/gpadmin/gpconfigs/postgresql.conf.del.sdw"
      when: inventory_hostname in groups['gpdb-mdw']

    - name: "Backup pg_hba.conf"
      shell: "{{ item }}"
      become: yes
      become_method: su
      become_user: "{{ greenplum_admin_user }}"
      become_flags: "-l"
      ignore_errors: yes
      with_items:
        - "cp -f /data/master/gpseg-1/pg_hba.conf /home/gpadmin/gpconfigs/pg_hba.conf.del.mdw"
        - "scp sdw1:{{ sdw1_gpseg0_path }}/pg_hba.conf /home/gpadmin/gpconfigs/pg_hba.conf.del.sdw"
      when: inventory_hostname in groups['gpdb-mdw']

    - name: "Check if the GPDB process remains."
      shell: "ps -ef | grep -v grep | grep postgres | wc -l"
      register: gpdb_status
      ignore_errors: yes
      failed_when: false

    - name: "[GPDB running] GPDB delete"
      shell: "yes | gpdeletesystem -d /data/master/gpseg-1/ -f"
      become: yes
      become_method: su
      become_user: "{{ greenplum_admin_user }}"
      become_flags: "-l"
      ignore_errors: yes
      when: inventory_hostname in groups['gpdb-mdw'] and gpdb_status.stdout != "0"

    - name: "[GPDB not running] mdw delete path - /data/master"
      file:
        path: "/data/master"
        state: absent
      ignore_errors: yes
      when: inventory_hostname in groups['gpdb-mdw'] and gpdb_status.stdout == "0"

    - name: "[GPDB not running] smdw delete path - /data/master"
      file:
        path: "/data/master"
        state: absent
      ignore_errors: yes
      when: inventory_hostname in groups['gpdb-smdw'] and gpdb_status.stdout == "0"

    - name: "[GPDB not running] sdw delete path - /data"
      file:
        path: "{{ item }}"
        state: absent
      with_items:
        - "{{ seg_dir }}/primary"
        - "{{ seg_dir }}/mirror"
      ignore_errors: yes
      when: inventory_hostname in groups['gpdb-sdw'] and gpdb_status.stdout == "0"

    - name: "[GPDB not running] sdw delete path - /data1 | /data2"
      file:
        path: "{{ item }}"
        state: absent
      with_items:
        - "{{ seg_dir1 }}/primary"
        - "{{ seg_dir1 }}/mirror"
        - "{{ seg_dir2 }}/primary"
        - "{{ seg_dir2 }}/mirror"
      ignore_errors: yes
      when: inventory_hostname in groups['gpdb-sdw'] and gpdb_status.stdout == "0"

    - name: "Delete link file in GPDB and GPCC"
      file:
        path: "/usr/local/{{ item }}"
        state: absent
      ignore_errors: yes
      with_items:
        - "greenplum-db"
        - "greenplum-cc"
        - "greenplum-cc-web"

    - name: "Delete tmp socket file - .s.PGSQL | .s.GPMC"
      shell: "rm -f /tmp/{{ item }}"
      with_items:
        - .s.GPMC*
        - .s.PGSQL*

    - name: "Remove GPDB rpm"
      yum:
        name: greenplum-db*
        state: absent

    - name: "Check GPDB Backup Path"
      stat:
        path: "/usr/local/{{ gpdb_del_path }}-{{ gpdb_del_ver }}_bak"
      register: gpdb_b_path

    - name: "Delete GPDB Bakcup Path if exists"
      shell: "rm -rf /usr/local/{{ gpdb_del_path }}-{{ gpdb_del_ver }}_bak"
      when: gpdb_b_path.stat.exists == true

    - name: "Check GPDB Path"
      stat:
        path: "/usr/local/{{ gpdb_del_path }}-{{ gpdb_del_ver }}"
      register: gpdb_path

    - name: "Backup GPDB Path"
      shell: "cp -r /usr/local/{{ gpdb_del_path }}-{{ gpdb_del_ver }} /usr/local/{{ gpdb_del_path }}-{{ gpdb_del_ver }}_bak"
      when: gpdb_path.stat.exists == true

    - name: "Delete GPDB Path"
      shell: "rm -rf /usr/local/{{ gpdb_del_path }}-{{ gpdb_del_ver }}"
      when: gpdb_path.stat.exists == true

    - name: "Check GPCC Backup Path"
      stat:
        path: "/usr/local/{{ gpcc_del_path }}-{{ gpcc_del_ver }}_bak"
      register: gpcc_b_path

    - name: "Delete GPCC Bakcup Path if exists"
      shell: "rm -rf /usr/local/{{ gpcc_del_path }}-{{ gpcc_del_ver }}_bak"
      when: gpcc_b_path.stat.exists == true

    - name: "Check GPCC Path"
      stat:
        path: "/usr/local/{{ gpcc_del_path }}-{{ gpcc_del_ver }}"
      register: gpcc_path

    - name: "Backup GPCC Path"
      shell: "cp -r /usr/local/{{ gpcc_del_path }}-{{ gpcc_del_ver }} /usr/local/{{ gpcc_del_path }}-{{ gpcc_del_ver }}_bak"
      when: gpcc_path.stat.exists == true

    - name: "Delete GPCC Path"
      shell: "rm -rf /usr/local/{{ gpcc_del_path }}-{{ gpcc_del_ver }}"
      when: gpcc_path.stat.exists == true
