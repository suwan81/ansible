---
- hosts:
    - localhost
  gather_facts: false
  tasks:
    - name: "Set /etc/hosts"
      template:
        src: "../templates/etc_hosts.j2"
        dest: "/etc/hosts"
        owner: root
        group: root
        mode: '0644'
        backup: yes

    - name: "Waiting for SSH(TCP/22) on All Hosts"
      wait_for:
        timeout: 600
        host: "{{ item }}"
        port: 22
        sleep: 3
      with_items:
        - "{{ groups['all'] }}"

    - name: "Install 'sshpass' RPM"
      yum:
        name: "sshpass"
        state: installed

- hosts:
    - all
  vars_files:
    - "vars-common.yml"
    - "version_files.yml"
  vars:
    - greenplum_admin_user: "gpadmin"
  remote_user: root
  become: yes
  become_method: sudo
  connection: ssh
  gather_facts: yes
  tasks:
    - name: "Check Exist 'root' SSH-Keys"
      stat:
        path: "{{ item }}"
      register: _check_root_ssh_keys
      when: inventory_hostname in groups['gpdb-mdw']
      with_items:
        - "{{ ssh_root_keys_dir }}/id_rsa"
        - "{{ ssh_root_keys_dir }}/id_rsa.pub"
        - "{{ ssh_root_keys_dir }}/authorized_keys"
        - "{{ ssh_root_keys_dir }}/config"

    - name: "Clear Old SSH Keys for 'root' user"
      shell: "rm -rf {{ ssh_root_keys_dir }}"
      connection: local
      with_items:
        - "{{ _check_root_ssh_keys.results }}"
      register: _clear_old_ssh_keys_root
      when: inventory_hostname in groups['gpdb-mdw'] and (item.stat.size is undefined or item.stat.size == 0)

    - name: "Generate New SSH Keys for 'root' user"
      shell: "ssh-keygen -t rsa -b 4096 -f {{ ssh_root_keys_dir }}/id_rsa -N ''"
      connection: local
      when: inventory_hostname in groups['gpdb-mdw'] and _clear_old_ssh_keys_root.changed == True

    - name: "Config 'root' SSH Env. - StrictHostKeyChecking=no & UserKnownHostsFile=/dev/null"
      template:
        src: "../templates/ssh-config.j2"
        dest: "{{ ssh_root_keys_dir }}/config"
        owner: root
        group: root
        mode: '0600'
        backup: yes
      connection: local
      when: inventory_hostname in groups['gpdb-mdw'] and _clear_old_ssh_keys_root.changed == True

    - name: "Generate 'authorized_keys' for 'root' user"
      copy:
        src: "{{ ssh_root_keys_dir }}/id_rsa.pub"
        dest: "{{ ssh_root_keys_dir }}/authorized_keys"
        owner: root
        group: root
        mode: '0600'
      connection: local
      when: inventory_hostname in groups['gpdb-mdw'] and _clear_old_ssh_keys_root.changed == True


    - name: "Deploy 'root' SSH key files to All Hosts"
      shell: "sshpass -p '{{ bd_ssh_root_pw }}' rsync -ar -e 'ssh -p 22' {{ ssh_root_keys_dir }} {{ item }}:/root/"
      with_items:
        - "{{ groups['all'] }}"
      when: inventory_hostname in groups['gpdb-mdw']

    - name: "Set bash_profile for root Alias command"
      template:
        src: "../templates/bash_profile.root.j2"
        dest: "/root/.bash_profile"
        owner: root
        group: root
        mode: '0644'
        backup: yes
      when: inventory_hostname in groups['gpdb-mdw']

    - name: "Set /etc/hosts & /etc/hostname"
      template:
        src: "../templates/etc_{{ item }}.j2"
        dest: "/etc/{{ item }}"
        owner: root
        group: root
        mode: '0644'
        backup: yes
      with_items:
        - "hosts"
        - "hostname"

    - name: "Set /etc/ntp.conf"
      template:
        src: "../templates/etc_ntp.conf.j2"
        dest: "/etc/ntp.conf"
        owner: root
        group: root
        mode: '0644'
        backup: yes

    - name: "Restart NTP"
      systemd:
        name: ntpd
        state: restarted

    - name: "Set /etc/resolv.conf"
      template:
        src: "../templates/resolv.conf.j2"
        dest: "/etc/resolv.conf"
        owner: root
        group: root
        mode: '0644'
        backup: yes

    - name: "Set /etc/sysctl.conf"
      template:
        src: "../templates/etc_sysctl.conf.j2"
        dest: "/etc/sysctl.conf"
        owner: root
        group: root
        mode: '0644'
        backup: yes

    - name: "Apply /etc/sysctl.conf"
      shell: "sysctl -p"
        
    - name: "Setup blockdev value\"16384\""
      shell: "/sbin/blockdev --setra 16384 /dev/sd*"

    - name: create greenplum admin user
      user:
        name: "{{ greenplum_admin_user }}"
        state: present
        groups: wheel
        password: "{{ bd_ssh_gpadmin_pw | password_hash('sha512') }}"

    - name: "Check Exist of SSH-Public-Key for 'gapdmin' User"
      stat:
        path: "{{ gpadmin_user_home }}/.ssh/id_rsa"
      register: _check_ssh_key_pub_gpadmin
      when: inventory_hostname in groups['gpdb-mdw']

    - name: "Check Exist of SSH-Private-Key for 'gapdmin' User"
      stat:
        path: "{{ gpadmin_user_home }}/.ssh/id_rsa.pub"
      register: _check_ssh_key_pri_gpadmin
      when: inventory_hostname in groups['gpdb-mdw']

    - name: "Generate New SSH-Key Pair for gpadmin"
      shell: "rm -rf {{ gpadmin_user_home }}/.ssh; ssh-keygen -t rsa -b 4096 -f {{ gpadmin_user_home }}/.ssh/id_rsa -N ''"
      become: true
      become_user: "{{ greenplum_admin_user }}"
      become_method: su
      when: inventory_hostname in groups['gpdb-mdw'] and (_check_ssh_key_pub_gpadmin.stat.exists == false or _check_ssh_key_pri_gpadmin.stat.exists == false)

    - name: "Deploy 'authorized_keys' taken from file"
      authorized_key:
        user: "{{ greenplum_admin_user }}"
        state: present
        key: "{{ lookup('file', '{{ gpadmin_user_home }}/.ssh/id_rsa.pub') }}"

    - name: "Deploy SSH-Key Pair (id_rsa & id_rsa.pub)"
      synchronize:
        src: "{{ gpadmin_user_home }}/.ssh/"
        dest: "{{ gpadmin_user_home }}/.ssh/"
        perms: yes

    - name: "Config SSH Env. - StrictHostKeyChecking=no & UserKnownHostsFile=/dev/null"
      template:
        src: "../templates/ssh-config.j2"
        dest: "{{ gpadmin_user_home }}/.ssh/config"
        owner: "{{ greenplum_admin_user }}"
        group: "{{ greenplum_admin_user }}"
        mode: '0600'
        backup: yes

    - name: "Create Directory {{ gpadmin_user_home }}/gpconfigs"
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
        owner: "{{ greenplum_admin_user }}"
        group: "{{ greenplum_admin_user }}"
      when: inventory_hostname in groups['gpdb-mdw'] or inventory_hostname in groups['gpdb-smdw']
      with_items:
        - "{{ gpadmin_user_home }}/gpconfigs"
        - "{{ gpadmin_user_home }}/cores"

    - name: "Set {{ gpadmin_user_home }}/gpconfigs/host_{{ item }}"
      template:
        src: "../templates/host_{{ item }}.j2"
        dest: "{{ gpadmin_user_home }}/gpconfigs/host_{{ item }}"
        owner: "{{ greenplum_admin_user }}"
        group: "{{ greenplum_admin_user }}"
        mode: '0644'
        backup: yes
      with_items:
        - "all"
        - "mst"
        - "smst"
        - "seg"
      when: inventory_hostname in groups['gpdb-mdw'] or inventory_hostname in groups['gpdb-smdw']

    - name: "Set {{ gpadmin_user_home }}/gpconfigs/hostname_{{ item }}"
      template:
        src: "../templates/hostname_{{ item }}.j2"
        dest: "{{ gpadmin_user_home }}/gpconfigs/hostname_{{ item }}"
        owner: "{{ greenplum_admin_user }}"
        group: "{{ greenplum_admin_user }}"
        mode: '0644'
        backup: yes
      with_items:
        - "all"
        - "mst"
        - "seg"
        - "smst"
      when: inventory_hostname in groups['gpdb-mdw'] or inventory_hostname in groups['gpdb-smdw']

    - name: "Change ownership of a directory - /data/staging"
      file:
        path: /data/staging
        state: directory
        recurse: yes
        owner: "{{ greenplum_admin_user }}"
        group: "{{ greenplum_admin_user }}"
        mode: '0755'
      when: inventory_hostname in groups['gpdb-mdw']

    - name: remove greenplum-db package
      yum:
        name: greenplum-db*
        state: absent

    - name: update pam_limits
      pam_limits:
        domain: "{{ greenplum_admin_user }}"
        limit_type: '-'
        limit_item: "{{ item.key }}"
        value: "{{ item.value }}"
      with_dict:
        nofile: 524288
        nproc: 131072

    - name: "Trasfer add package files"
      copy:
        src: "{{ item }}"
        dest: /tmp/
      with_fileglob:
        -  "{{ lookup('env','PWD') }}/rpm_files/*"

    - name: "Install add package: dstat, libcgroup)"
      yum:
        name:
          - /tmp/dstat-0.7.2-12.el7.noarch.rpm
          - /tmp/libcgroup-0.41-11.el7.x86_64.rpm
          - /tmp/libcgroup-tools-0.41-11.el7.x86_64.rpm
        state: present

    - name: "Setting Resource Groups parameter(1)"
      template:
        src: "../templates/resource_groups.j2"
        dest: "/etc/cgconfig.d/gpdb.conf"
        owner: root
        group: root
        mode: '0644'
        backup: yes

    - name: "Setting Resource Groups parameter(2)"
      shell: "cgconfigparser -l /etc/cgconfig.d/gpdb.conf"

    - name: "Start Resource Groups Service(3)"
      systemd:
        name: cgconfig.service
        state: started
        enabled: yes

    - name: "Parameter setting for creating core file(1)"
      replace:
        path: "/etc/security/limits.d/20-nproc.conf"
        regexp: '^\*          soft    nproc     4096'
        replace: '#*          soft    nproc     4096'

    - name: "Parameter setting for creating core file(2)"
      lineinfile:
        path: "/etc/security/limits.d/20-nproc.conf"
        line: "gpadmin soft core unlimited"

    - name: "Set /etc/hosts & /etc/hostname"
      template:
        src: "../templates/etc_{{ item }}.j2"
        dest: "/etc/{{ item }}"
        owner: root
        group: root
        mode: '0644'
        backup: yes
      with_items:
        - "hosts"
        - "hostname"

    - name: "Set Hostname"
      shell: "hostname {{ bd_hostname }}"

    - name: "Refresh Facts of All Hosts"
      setup:
        gather_subset: "all"

    - name: "Set MTU to Default Network-Interface Config File"
      shell: "sed -i '/^MTU=*/d' {{ nic_conf_file }} && echo 'MTU={{ nic_mtu }}' >> {{ nic_conf_file }}"

    - name: "Apply MTU to Default Network-Interface"
      shell: "ifconfig {{ if_name }} mtu {{ nic_mtu }}"

#    - name: find installed greenplum version
#      shell: . /usr/local/greenplum-db/greenplum_path.sh && /usr/local/greenplum-db/bin/postgres --gp-version
#      register: postgres_gp_version
